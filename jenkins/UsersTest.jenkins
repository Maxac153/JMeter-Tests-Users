#!groovy

// Дата запуска тестов
def currentDate = new Date().format('yyyy-MM-dd_HH-mm-ss')
def testsName = []

pipeline {
    agent any
    parameters {
        // Какие тесты запускаем
        booleanParam(name: 'PREPARATION_DATA_ENABLE', defaultValue: false, description: 'Preparation enable')
        booleanParam(name: 'AUTHORIZATION_ENABLE_TEST', defaultValue: false, description: 'Authorization enable test')
        booleanParam(name: 'REGISTRATION_ENABLE_TEST', defaultValue: false, description: 'Registration enable test')
        booleanParam(name: 'UPLOADING_AVATAR_ENABLE_TEST', defaultValue: false, description: 'Uploading avatar enable test')

        // Параметры запуска тестов
        text(name: 'COMMON_PARAMETERS', description: 'Общие параметры', defaultValue: '' +
                'BEFORE_PEEK_INITIAL_DELAY=0\n' +
                'PEEK_INITIAL_DELAY=600\n' +
                'AFTER_PEEK_INITIAL_DELAY=900\n' +
                'BEFORE_PEEK_STARTUP_TIME=0\n' +
                'PEEK_STARTUP_TIME=5\n' +
                'AFTER_PEEK_STARTUP_TIME=0\n' +
                'BEFORE_PEEK_HOLD_LOAD=600\n' +
                'PEEK_HOLD_LOAD=295\n' +
                'AFTER_PEEK_HOLD_LOAD=600\n' +
                'BEFORE_PEEK_SHUTDOWN_TIME=5\n' +
                'PEEK_SHUTDOWN_TIME=0\n' +
                'AFTER_PEEK_SHUTDOWN_TIME=0'
        )

        text(name: 'AUTHORIZATION_PARAMETERS', description: 'Параметры теста (Authorization Test)', defaultValue: '' +
                'THROUGHPUT_TIMER=1.00\n' +
                'START_THREADS=1\n' +
                'PEAK_THREADS=2'
        )

        text(name: 'REGISTRATION_PARAMETERS', description: 'Параметры теста (Registration Test)', defaultValue: '' +
                'THROUGHPUT_TIMER=1.00\n' +
                'START_THREADS=1\n' +
                'PEAK_THREADS=2'
        )

        text(name: 'UPLOADING_AVATAR_PARAMETERS', description: 'Параметры теста (Uploading Avatar Test)', defaultValue: '' +
                'THROUGHPUT_TIMER=1.00\n' +
                'START_THREADS=1\n' +
                'PEAK_THREADS=2'
        )
    }

    environment {
        // Пути к тестам и логам
        TEST_PATH = './tests'
        LOG_PATH = "./logs/${currentDate}"
    }

    stages {
        stage('TEST PREPARATION DATA') {
            when {
                expression { params.PREPARATION_DATA_ENABLE == true }
            }
            steps {
                script {
                    sh """
                        mkdir -p ${env.LOG_PATH}
                        python3 pre_generate_users.py
                    """
                }
            }
        }

        stage('START USERS SITE TESTS') {
            parallel {
                stage('START AUTHORIZATION TEST') {
                    when {
                        expression { params.AUTHORIZATION_ENABLE_TEST == true }
                    }
                    steps {
                        script {
                            // Загрузка метода из common класса
                            def classLoad = load "./jenkins/UsersCommon.groovy"
                            def usersCommon = classLoad.UsersCommon

                            echo "=========== AuthorizationTest ==========="
                            testsName.add("AuthorizationTest")
                            usersCommon.start_jmeter_test(
                                    "AuthorizationTest",
                                    env.TEST_PATH,
                                    env.LOG_PATH,
                                    env.COMMON_PARAMETERS,
                                    env.AUTHORIZATION_PARAMETERS
                            )
                        }
                    }
                }

                stage('START REGISTRATION TEST') {
                    when {
                        expression { params.REGISTRATION_ENABLE_TEST == true }
                    }
                    steps {
                        script {
                            // Загрузка метода из common класса
                            def classLoad = load "./jenkins/UsersCommon.groovy"
                            def usersCommon = classLoad.UsersCommon

                            echo "=========== RegistrationTest ==========="
                            testsName.add("RegistrationTest")
                            usersCommon.start_jmeter_test(
                                    "RegistrationTest",
                                    env.TEST_PATH,
                                    env.LOG_PATH,
                                    env.COMMON_PARAMETERS,
                                    env.REGISTRATION_PARAMETERS
                            )
                        }
                    }
                }

                stage('START UPLOADING AVATAR TEST') {
                    when {
                        expression { params.UPLOADING_AVATAR_ENABLE_TEST == true }
                    }
                    steps {
                        script {
                            // Загрузка метода из common класса
                            def classLoad = load "./jenkins/UsersCommon.groovy"
                            def usersCommon = classLoad.UsersCommon

                            echo "=========== UploadingAvatarTest ==========="
                            testsName.add("UploadingAvatarTest")
                            usersCommon.start_jmeter_test(
                                    "UploadingAvatarTest",
                                    env.TEST_PATH,
                                    env.LOG_PATH,
                                    env.COMMON_PARAMETERS,
                                    env.UPLOADING_AVATAR_PARAMETERS
                            )
                        }
                    }
                }

            }
        }
    }

    post {
        always {
            script {
                try {
                    echo "=========== CREATE LOG ARTIFACT ==========="
                    archiveArtifacts artifacts: "logs/**", allowEmptyArchive: true

                    echo "=========== KILL JAVA PROCESSES ==========="
                    testsName.each { testName ->
                        sh "kill -9 \$(pgrep -f ${testName})"
                    }

                } catch (Exception e) {
                    echo "ERROR: ${e.toString()}"
                } finally {
                    dir('logs') {
                        deleteDir()
                    }
                }
            }
        }
    }
}